"""
Unit and regression test for the MultirefPredict package.
"""

# Import package, test suite, and other packages as needed
import pytest
import sys
from MultirefPredict.basis_info import element_to_num_AO, element_to_core_AO, molecule_to_num_AO

@pytest.mark.parametrize("symbol_list, expected_num_AO" , [
    ("H", 2),
    ("He", 2),
    ("Li", 15),
    ("Be", 15),
    ("B", 15),
    ("C", 15),
    ("N", 15),
    ("O", 15),
    ("F", 15),
    ("Ne", 15),
    ("Na", 19),
    ("Mg", 19),
    ("Al", 19),
    ("Si", 19),
    ("P", 19),
    ("S", 19),
    ("Cl", 19),
    ("Ar", 19),
    ("K", 12),
    ("Ca", 12),
    ("Sc", 24),
    ("Ti", 24),
    ("V", 24),
    ("Cr", 24),
    ("Mn", 24),
    ("Fe", 24),
    ("Co", 24),
    ("Ni", 24),
    ("Cu", 24),
    ("Zn", 20),
    ("Ga", 8),
    ("Ge", 8),
    ("As", 8),
    ("Se", 8),
    ("Br", 8),
    ("Kr", 8),
    ("Rb", 12),
    ("Sr", 12),
    ("Y", 24),
    ("Zr", 24),
    ("Nb", 24),
    ("Mo", 24),
    ("Tc", 24),
    ("Ru", 24),
    ("Rh", 24),
    ("Pd", 24),
    ("Ag", 24),
    ("Cd", 20),
    ("In", 8),
    ("Sn", 8),
    ("Sb", 8),
    ("Te", 8),
    ("I", 8),
    ("Xe", 8),
    ("Cs", 12),
    ("Ba", 12),
    ("La", 24),
    ("Hf", 24),
    ("Ta", 24),
    ("W", 24),
    ("Re", 24),
    ("Os", 24),
    ("Ir", 24),
    ("Pt", 24),
    ("Au", 24),
    ("Hg", 20),
    ("Tl", 20),
    ("Pb", 8),
    ("Bi", 8),
    ("U", 24),
    ("Np", 24),
])
def test_element_to_num_AO(symbol_list, expected_num_AO):
    assert element_to_num_AO(symbol_list, "lacvps_ecp") == expected_num_AO

@pytest.mark.parametrize("symbol_list, expected_core_AO" , [
    ("H", 0),
    ("He", 0),
    ("Li", 1),
    ("Be", 1),
    ("B", 1),
    ("C", 1),
    ("N", 1),
    ("O", 1),
    ("F", 1),
    ("Ne", 1),
    ("Na", 5),
    ("Mg", 5),
    ("Al", 5),
    ("Si", 5),
    ("P", 5),
    ("S", 5),
    ("Cl", 5),
    ("Ar", 5),
    ("K", 0),
    ("Ca", 0),
    ("Sc", 0),
    ("Ti", 0),
    ("V", 0),
    ("Cr", 0),
    ("Mn", 0),
    ("Fe", 0),
    ("Co", 0),
    ("Ni", 0),
    ("Cu", 0),
    ("Zn", 0),
    ("Ga", 0),
    ("Ge", 0),
    ("As", 0),
    ("Se", 0),
    ("Br", 0),
    ("Kr", 0),
    ("Rb", 0),
    ("Sr", 0),
    ("Y", 0),
    ("Zr", 0),
    ("Nb", 0),
    ("Mo", 0),
    ("Tc", 0),
    ("Ru", 0),
    ("Rh", 0),
    ("Pd", 0),
    ("Ag", 0),
    ("Cd", 0),
    ("In", 0),
    ("Sn", 0),
    ("Sb", 0),
    ("Te", 0),
    ("I", 0),
    ("Xe", 0),
    ("Cs", 0),
    ("Ba", 0),
    ("La", 0),
    ("Hf", 0),
    ("Ta", 0),
    ("W", 0),
    ("Re", 0),
    ("Os", 0),
    ("Ir", 0),
    ("Pt", 0),
    ("Au", 0),
    ("Hg", 0),
    ("Tl", 0),
    ("Pb", 0),
    ("Bi", 0),
    ("U", 0),
    ("Np", 0),
])
def test_element_to_core_AO(symbol_list, expected_core_AO):
    assert element_to_core_AO(symbol_list, "lacvps_ecp") == expected_core_AO


def test_molecule_to_num_AO(qcelemental_cu_complex):
    num_AO, core_AO = molecule_to_num_AO(qcelemental_cu_complex, "lacvps_ecp")
    assert num_AO == 230
    assert core_AO == 10
